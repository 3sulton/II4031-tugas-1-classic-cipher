
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"../img")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def openVigenere():
    from vigenere import Vigenere
    Vigenere(window)

def openExtended():
    from extended import Extended
    Extended(window)

def openPlayfair():
    from playfair import Playfair
    Playfair(window)

def openEnigma():
    from enigma import Enigma
    Enigma(window)

class OnetimePad():
    def __init__(self, screen):
        self.screen = screen
        global window
        screen.destroy()

        window = Tk()

        window.title("One-time Pad Cipher")
        window.geometry("900x600")
        window.configure(bg = "#E8DFCA")


        canvas = Canvas(
            window,
            bg = "#E8DFCA",
            height = 600,
            width = 900,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        # judul
        canvas.place(x = 0, y = 0)
        image_image_title = PhotoImage(
            file=relative_to_assets("title.png"))
        image_title = canvas.create_image(
            97.0,
            87.0,
            image=image_image_title
        )

        # tombol vigenere
        button_image_vigenere = PhotoImage(
            file=relative_to_assets("vigenere.png"))
        button_vigenere = Button(
            image=button_image_vigenere,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: openVigenere(),
            relief="flat"
        )
        # posisi tombol vigenere
        button_vigenere.place(
            x=22.0,
            y=174.0,
            width=150.0,
            height=40.0
        )

        # tombol extended vigenere
        button_image_extended = PhotoImage(
            file=relative_to_assets("extended.png"))
        button_extended = Button(
            image=button_image_extended,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: openExtended(),
            relief="flat"
        )
        # posisi tombol extended vigenere
        button_extended.place(
            x=22.0,
            y=249.0,
            width=150.0,
            height=40.0
        )

        # tombol playfair
        button_image_playfair = PhotoImage(
            file=relative_to_assets("playfair.png"))
        button_playfair = Button(
            image=button_image_playfair,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: openPlayfair(),
            relief="flat"
        )
        # posisi tombol playfair
        button_playfair.place(
            x=22.0,
            y=324.0,
            width=150.0,
            height=40.0
        )

        # tombol otp
        button_image_otp_on = PhotoImage(
            file=relative_to_assets("otp_on.png"))
        button_otp_on = Button(
            image=button_image_otp_on,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("otp_on clicked"),
            relief="flat"
        )
        # posisi tombol otp
        button_otp_on.place(
            x=22.0,
            y=399.0,
            width=150.0,
            height=40.0
        )

        # tombol enigma
        button_image_enigma = PhotoImage(
            file=relative_to_assets("enigma.png"))
        button_enigma = Button(
            image=button_image_enigma,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: openEnigma(),
            relief="flat"
        )
        # posisi tombol enigma
        button_enigma.place(
            x=22.0,
            y=475.0,
            width=150.0,
            height=40.0
        )

        # line
        canvas.create_rectangle(
            194.0,
            0.0,
            199.0,
            600.0,
            fill="#7895B2",
            outline="")

        # input label
        canvas.create_text(
            221.0,
            27.0,
            anchor="nw",
            text="Input : ",
            fill="#000000",
            font=("Poppins Regular", 15 * -1)
        )

        # tombol choose file untuk input (bisa plaintext atau ciphertext)
        button_image_import = PhotoImage(
            file=relative_to_assets("import.png"))
        button_import = Button(
            image=button_image_import,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("import clicked"),
            relief="flat"
        )
        # posisi tombol choose file untuk input
        button_import.place(
            x=221.0,
            y=50.0,
            width=657.0,
            height=30.0
        )

        # kolom input
        entry_image_input = PhotoImage(
            file=relative_to_assets("input.png"))
        entry_bg_input = canvas.create_image(
            549.5,
            121.5,
            image=entry_image_input
        )
        # format input
        entry_input = Text(
            bd=0,
            bg="#F5EFE6",
            fg="#000716",
            font=("Poppins Regular", 15 * -1),
            highlightthickness=0
        )
        # posisi kolom input
        entry_input.place(
            x=221.0,
            y=85.0,
            width=657.0,
            height=71.0
        )

        # key label
        canvas.create_text(
            221.0,
            178.0,
            anchor="nw",
            text="Key :",
            fill="#000000",
            font=("Poppins Regular", 15 * -1)
        )

        # tombol generate key (untuk enkripsi)
        button_image_generate = PhotoImage(
            file=relative_to_assets("generate_key.png"))
        button_generate = Button(
            image=button_image_generate,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("generate clicked"),
            relief="flat"
        )
        # posisi tombol generate key
        button_generate.place(
            x=221.0,
            y=201.0,
            width=317.0,
            height=30.0
        )

        # tombol choose key file untuk dekripsi
        button_image_import_key = PhotoImage(
            file=relative_to_assets("import_key.png"))
        button_import_key = Button(
            image=button_image_import_key,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("import_key clicked"),
            relief="flat"
        )
        # posisi tombol choose key file
        button_import_key.place(
            x=561.0,
            y=201.0,
            width=317.0,
            height=30.0
        )
        
        # kolom input key
        entry_image_key = PhotoImage(
            file=relative_to_assets("key.png"))
        entry_bg_key = canvas.create_image(
            549.5,
            271.5,
            image=entry_image_key
        )
        # format input key
        entry_key = Text(
            bd=0,
            bg="#F5EFE6",
            fg="#000716",
            font=("Poppins Regular", 15 * -1),
            highlightthickness=0
        )
        # posisi kolom key
        entry_key.place(
            x=221.0,
            y=236.0,
            width=657.0,
            height=71.0
        )

        # checkbutton untuk menggunakan spasi atau tidak
        check = Checkbutton(
                window,
                anchor = "nw",
                bg = "#E8DFCA",
                text = "add a space after 5 letters",
                font=("Poppins Regular", 15 * -1)
        )
        # posisi checkbutton
        check.pack()
        check.place(
            x = 222.0,
            y = 324.0
        )

        # posisi tombol encrypt
        button_image_encrypt = PhotoImage(
            file=relative_to_assets("encrypt.png"))
        button_encrypt = Button(
            image=button_image_encrypt,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("encrypt clicked"),
            relief="flat"
        )
        # posisi tombol encrypt
        button_encrypt.place(
            x=221.0,
            y=359.0,
            width=317.0,
            height=40.0
        )

        # tombol decrypt
        button_image_decrypt = PhotoImage(
            file=relative_to_assets("decrypt.png"))
        button_decrypt = Button(
            image=button_image_decrypt,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("decrypt clicked"),
            relief="flat"
        )
        # posisi tombol decrypt
        button_decrypt.place(
            x=561.0,
            y=359.0,
            width=317.0,
            height=40.0
        )

        # output label
        canvas.create_text(
            221.0,
            419.0,
            anchor="nw",
            text="Ouput : ",
            fill="#000000",
            font=("Poppins Regular", 15 * -1)
        )

        # kolom output
        '''canvas.create_rectangle(
            221.0,
            442.0,
            878.0,
            515.0,
            fill="#F5EFE6",
            outline="")'''
        
        # kolom output
        entry_image_output = PhotoImage(
            file=relative_to_assets("output.png"))
        entry_bg_output = canvas.create_image(
            549.5,
            121.5,
            image=entry_image_output
        )
        # format output
        entry_output = Text(
            bd=0,
            bg="#F5EFE6",
            fg="#000716",
            font=("Poppins Regular", 15 * -1),
            highlightthickness=0
        )
        # posisi kolom output
        entry_output.place(
            x=221.0,
            y=442.0,
            width=657.0,
            height=71.0
        )

        # tombol save dari output
        button_image_save = PhotoImage(
            file=relative_to_assets("save.png"))
        button_save = Button(
            image=button_image_save,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("save clicked"),
            relief="flat"
        )
        # posisi tombol save
        button_save.place(
            x=221.0,
            y=520.0,
            width=657.0,
            height=30.0
        )
        window.resizable(False, False)
        window.mainloop()
